package views;

import controllers.Actions;
import controllers.Controller;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import models.entity.BinaryNode;
import models.entity.BinaryTree;
import controllers.Utilities;
import java.math.BigDecimal;
import java.math.RoundingMode;

/**
 *
 * @author Gabriel Huertas
 */
public class MainWindow extends javax.swing.JFrame {

    private DefaultTreeModel treeModel;
    private DefaultMutableTreeNode currentNode;
    private DefaultMutableTreeNode rootNode;
    public DefaultMutableTreeNode getCurrentNode;

    //-------------------Controllers---------------------
    /**
     * Creates new form MainWindow
     *
     * @param controller
     */
    public MainWindow(Controller controller) {

        setUndecorated(true);
        initComponents();

        this.setVisible(true);
        setLocationRelativeTo(null);
        setComponentsActionListener(controller);
        currentNode = null;
        rootNode = null;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabsPanel = new javax.swing.JTabbedPane();
        expressionPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        aritmethicExpressionJTF = new javax.swing.JTextField();
        solveButton = new javax.swing.JButton();
        solutionLabel = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();
        progressPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        customBinaryJTree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(Utilities.GAME_TITLE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(450, 450));
        setSize(new java.awt.Dimension(450, 450));

        tabsPanel.setBackground(new java.awt.Color(204, 204, 255));
        tabsPanel.setFont(new java.awt.Font("Kristen ITC", 0, 11)); // NOI18N

        expressionPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Kristen ITC", 0, 24)); // NOI18N
        jLabel1.setText(Utilities.GAME_TITLE);
        jLabel1.setToolTipText("");

        aritmethicExpressionJTF.setFont(new java.awt.Font("Kristen ITC", 0, 14)); // NOI18N
        aritmethicExpressionJTF.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Please, introduce an aritmethic expression ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Kristen ITC", 0, 11))); // NOI18N
        aritmethicExpressionJTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aritmethicExpressionJTFActionPerformed(evt);
            }
        });

        solveButton.setBackground(new java.awt.Color(139, 169, 249));
        solveButton.setFont(new java.awt.Font("Kristen ITC", 0, 11)); // NOI18N
        solveButton.setText("Solve");

        solutionLabel.setFont(new java.awt.Font("Kristen ITC", 0, 14)); // NOI18N
        solutionLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Solution", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Kristen ITC", 0, 11))); // NOI18N
        solutionLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        exitButton.setBackground(new java.awt.Color(243, 82, 82));
        exitButton.setFont(new java.awt.Font("Kristen ITC", 0, 11)); // NOI18N
        exitButton.setText("Exit");

        javax.swing.GroupLayout expressionPanelLayout = new javax.swing.GroupLayout(expressionPanel);
        expressionPanel.setLayout(expressionPanelLayout);
        expressionPanelLayout.setHorizontalGroup(
            expressionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(expressionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, expressionPanelLayout.createSequentialGroup()
                .addGap(0, 76, Short.MAX_VALUE)
                .addGroup(expressionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(aritmethicExpressionJTF, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                    .addComponent(solutionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(94, 94, 94))
            .addGroup(expressionPanelLayout.createSequentialGroup()
                .addGroup(expressionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(expressionPanelLayout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(solveButton))
                    .addGroup(expressionPanelLayout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(expressionPanelLayout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        expressionPanelLayout.setVerticalGroup(
            expressionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(expressionPanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(aritmethicExpressionJTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(solveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solutionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(exitButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabsPanel.addTab("Expression", expressionPanel);

        progressPanel.setBackground(new java.awt.Color(255, 255, 255));

        customBinaryJTree.setModel(null);
        jScrollPane1.setViewportView(customBinaryJTree);

        javax.swing.GroupLayout progressPanelLayout = new javax.swing.GroupLayout(progressPanel);
        progressPanel.setLayout(progressPanelLayout);
        progressPanelLayout.setHorizontalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
                .addContainerGap())
        );
        progressPanelLayout.setVerticalGroup(
            progressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabsPanel.addTab("JTree Form", progressPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabsPanel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabsPanel, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aritmethicExpressionJTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aritmethicExpressionJTFActionPerformed
        solveButton.setEnabled(!aritmethicExpressionJTF.getText().isEmpty());
    }//GEN-LAST:event_aritmethicExpressionJTFActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aritmethicExpressionJTF;
    private javax.swing.JTree customBinaryJTree;
    private javax.swing.JButton exitButton;
    private javax.swing.JPanel expressionPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel progressPanel;
    private javax.swing.JLabel solutionLabel;
    private javax.swing.JButton solveButton;
    private javax.swing.JTabbedPane tabsPanel;
    // End of variables declaration//GEN-END:variables

//----------------------Methods------------------------
    /**
     * Sets some components ActionListener
     *
     * @param controller
     */
    private void setComponentsActionListener(Controller controller) {
        solveButton.setActionCommand(Actions.SOLVE.name());
        solveButton.addActionListener(controller);
        exitButton.setActionCommand(Actions.EXIT.name());
        exitButton.addActionListener(controller);
    }

    /**
     * Set initial components in JTree-based format of incoming logical Binary
     * tree.
     *
     * @param aritmethicExpressionTree
     */
    public void showBinaryTreeComponents(BinaryTree aritmethicExpressionTree) {
        if (!aritmethicExpressionTree.isEmpty()) {
            rootNode = new DefaultMutableTreeNode(aritmethicExpressionTree.getRoot().toString());
            showInTree(rootNode, aritmethicExpressionTree.getRoot());
            currentNode = (DefaultMutableTreeNode) rootNode.getFirstChild();
            treeModel = new DefaultTreeModel(rootNode);
            customBinaryJTree.setModel(treeModel);
        }
    }

    /**
     * Dinamically adds to a JTree using recursivity
     *
     * @param parentNode
     * @param logicNode
     */
    public void showInTree(DefaultMutableTreeNode parentNode, BinaryNode logicNode) {
        if (logicNode != null) {
            DefaultMutableTreeNode newnode = new DefaultMutableTreeNode(logicNode.getInfo().toString());
            parentNode.add(newnode);
            if (logicNode.getLeft() != null) {
                showInTree(newnode, logicNode.getLeft());
            }
            if (logicNode.getRight() != null) {
                showInTree(newnode, logicNode.getRight());
            }
        }
    }

    /**
     *
     * @return Input text from the user
     * @throws Exception
     */
    public String getText() throws Exception {
        String text = aritmethicExpressionJTF.getText();
        if (!text.isEmpty()) {
            return text.replaceAll("\\s", "");
        } else {
            throw new Exception("Please, fill the blanks with some aritmethic expression");
        }

    }

    /**
     * Shows result of the algebraic expression both JTreeForm (Traversing the
     * logical tree and putting every node in a JtreeNode) and numeric form (As
     * it rounds in half up mode to the specified power of ten of the unscaled
     * value)
     *
     * @param result
     * @param algebraicExpressionTree
     */
    public void showResults(double result, BinaryTree algebraicExpressionTree) {
        solutionLabel.setText("The solution is " + BigDecimal.valueOf(result).setScale(3, RoundingMode.HALF_UP));
        showBinaryTreeComponents(algebraicExpressionTree);
    }
}
